import doctest

LETTER_TO_MORSE = {
    'A': '.-', 'B': '-...', 'C': '-.-.',
    'D': '-..', 'E': '.', 'F': '..-.',
    'G': '--.', 'H': '....', 'I': '..',
    'J': '.---', 'K': '-.-', 'L': '.-..',
    'M': '--', 'N': '-.', 'O': '---',
    'P': '.--.', 'Q': '--.-', 'R': '.-.',
    'S': '...', 'T': '-', 'U': '..-',
    'V': '...-', 'W': '.--', 'X': '-..-',
    'Y': '-.--', 'Z': '--..', '1': '.----',
    '2': '..---', '3': '...--', '4': '....-',
    '5': '.....', '6': '-....', '7': '--...',
    '8': '---..', '9': '----.', '0': '-----',
    ', ': '--..--', '.': '.-.-.-', '?': '..--..',
    '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-',
    ' ': ' '
}

MORSE_TO_LETTER = {
    morse: letter
    for letter, morse in LETTER_TO_MORSE.items()
}
'''
основная проблема такого кодирования это отсутствие кодирования пробелов
без этого раскодированный текст получается слитным

'''


def encode(message: str) -> str:
    # Кодирует строку в соответсвие с таблицей азбуки Морзе
    """
    >>> encode('0123456789')
    '----- .---- ..--- ...-- ....- ..... -.... --... ---.. ----.'
    >>> encode('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG') # это фраза из всех английских букв
    '- .... .   --.- ..- .. -.-. -.-   -... .-. --- .-- -.   ..-. --- -..-   .--- ..- -- .--. ...   --- ...- . .-.   - .... .   .-.. .- --.. -.--   -.. --- --.'
    >>> encode('HELLO, WORLD!') # не правильно закодированна запятая
    '.... . .-.. .-.. --- ·-·-·- .-- --- .-. .-.. -.. --··--'
    >>> encode('(10 - 1) / 3.0 EQ 3.0 ?')   # опять пробелы
    '-.--. .---- ----- -....- .---- -.--.- -..-. ...-- ······ ----- -...- -...- ...-- ······ -----'
    >>> encode('ПРЕВЕД!')  # не предусмотрен русский алфавит
    '.--. .-. . .-- . -..'
    >>> encode('IT: 1 / OR IT 2?')
    '.. - ---··· .---- -..-. --- .-. .. - ..--- ..--..'
    """
    encoded_signs = [
        LETTER_TO_MORSE[letter] for letter in message
    ]

    return ' '.join(encoded_signs)


if __name__ == '__main__':
    doctest.testmod()
